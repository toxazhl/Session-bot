import logging

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot import keyboards as kb
from bot.core.db.models import User
from bot.core.db.repo import Repo
from bot.core.payment.crystalpay import CrystalPay
from bot.misc.states import ProfileStates

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def upload_session_handler(
    message: Message, user: User, repo: Repo, state: FSMContext
):
    await state.clear()
    session_count = await repo.session.count(user_id=message.from_user.id)
    await message.answer(
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance / 100:.2f}$\n"
        f"üìÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {session_count}\n",
        reply_markup=kb.profile.profile(),
    )


@router.callback_query(F.data == "refill_balance")
async def refill_balance_handler(query: CallbackQuery, state: FSMContext):
    await query.answer("‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
    # await query.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n(–ú–∏–Ω–∏–º—É–º 5$)")
    # await state.set_state(ProfileStates.refill_amount)


@router.message(F.text.isdigit(), ProfileStates.refill_amount)
async def amount_handler(message: Message, bot: Bot, crystalpay: CrystalPay):
    amount = int(message.text)
    if amount < 5:
        return await message.answer(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 5$\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
        )

    invoice = await crystalpay.invoice_create(
        amount=amount,
        currency="USD",
        lifetime=1440,
        extra=str(message.from_user.id),
        redirect=f"https://t.me/{(await bot.me()).username}",
    )
    if invoice["error"]:
        return await message.answer(
            "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )

    await message.answer(
        "–ò–Ω–≤–æ–π—Å –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω üëá", reply_markup=kb.profile.pay_url(invoice["url"])
    )
